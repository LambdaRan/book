

条款０４：确定对象被使用前已被初始化

C++规定，对象的成员变量的初始化动作发生在进入构造函数本体之前。
对象初始化：最好使用成员初始值列表。
    成员初始值列表中，指定无参(没有指定初始值)　则调用默认构造函数
    ABEntry::ABEntry()
        : theName(),// 调用theName的default构造函数
          theAddress()
    {}

成员初始化顺序：
    基类　早于　派生类
    class的成员变量总是以其声明次序被初始化
        成员初始化列表中的顺序，最好总是以成员变量的声明次序为次序

不同编译单元内定义之non-local static对象：

global对象、定义域namespace作用域内的对象、在class内、函数内、以及在file作用域被声明为static的对象。

local static对象：函数内的static对象
non-local static对象：其他static对象

编译单元(translation unit)是指产出单一目标文件(single object file)的那些源码

C++对“定义于不同的编译单元内的non-local static对象”的初始化相对次序并无明确定义.
解决办法：
    使用Singleton模式
        将每个non-local static对象搬到自己的专属函数内（该对象在此函数内被声明为static）
        就是non-local static对象被local static对象替换了。
基础在于：C++保证，函数内的local static 对象会在“该函数被调用期间”"首次遇上该对象之定义式"时被初始化。

请记住：
    为内置类型对象进行手工初始化，因为C++不保证初始化他们
    构造函数最好使用成员初始值列表(member initialization list)，而不是在构造函数本体内使用赋值操作(assignment)
        初始值列表的成员变量，其排列次序应该和他们在class中的声明次序相同。
    为免除“跨编译单元之初始化次序”问题，请以local static 对象替换non-local static 对象。