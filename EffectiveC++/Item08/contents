

条款08：别让异常逃离析构函数

如果析构函数有抛出异常的操作，通常的做法：
    (1)如果close抛出异常就结束程序。通常调用abort完成
    DBConn::~DBConn()
    {
        try {
            db.close()
        }catch(...) {
            // 制作运转需求，记下对close调用失败
            std::abort();
        }
    }
    (2)吞下因调用close而发生的异常
    DBConn::~DBConn()
    {
        try {
            db.close()
        }catch(...) {
            // 制作运转需求，记下对close调用失败
        }
    }

较佳的策略：
    重新设计接口，使其客户有机会对可能出现异常的问题做出反应
        （将抛出异常的操作放到单独的接口函数中，供客户调用）

    class DBConn
    {
    public:
        ...
        void close()
        {
            db.close();
            closed = true;
        }
        ~DBConn()
        {
            if (!closed)
            {
                try {
                    db.close()
                }catch(...) {
                    // 制作运转需求，记下对close调用失败

                    // 如果关闭失败，记录下来并结束程序或吞下异常
                }                
            }
        }
    private:
        DBConnection db;
        bool closed;
    };
    

如果某个操作可能在失败时抛出异常，而又存在某种需要必须处理该异常，
    那么这个异常必须来自析构函数以外的某个函数。

请记住：
    析构函数绝对不要抛出异常。如果一个被析构函数调用的函数可能抛出异常，
        析构函数应该捕捉任何异常，然后吞下它们（不传播）或结束程序
    如果客户需要对某个操作函数运行期间的异常做出反应，
        那么class应该提供一个普通函数（而非在析构函数中）执行操作。