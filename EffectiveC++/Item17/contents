

条款17：以独立语句将newed对象置入智能指针


有这样一个函数调用：
    processWidget(std::shared_ptr<Widget>(new Widget), priority());
    虽然我们使用“对象管理式资源”，上述调用却可能泄漏资源。

分析：
    调用processWidget之前，编译器必须穿件代码，做一下三件事
        调用 priority函数
        执行 “new Widget”
        调用 std::shared_ptr构造函数
    
    C++编译器以什么顺序完成这些事情呢？弹性很大。

    如果以以下顺序操作：
        执行 “new Widget”
        调用 priority函数
        调用 std::shared_ptr构造函数
    
    万一对priority函数调用出现异常，此时会发生资源泄漏。

避免问题的办法：使用分离语句

    std::shared_ptr<Widget> pw(new Widget);
    processWidget(pw, priority());

请记住：
    以独立语句将newed对象存储于（置于）智能指针内。如果不这样做，
        一旦异常被抛出，有可能导致难以察觉的资源泄漏。