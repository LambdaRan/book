

条款35：考虑virtual函数以外的其他选择


藉由Non-Virtual Interface手法实现Template Method模式

non-virtual interface（NVI）手法
    它是Template Method设计模式的一个独特表现形式。

class GamCharacter
{
public：
    int healthValue() const // derived class不重新定义它
    {
        ...                            // 做一些事前工作
        int retVal = doHealthValue();  // 做真正的工作
        ...                             // 做一些事后工作
        return retVal;
    }
private：
    virtual int doHealthValue() const// derived class重新定义它
    {
        // 缺省代码
    }
}；
NVI手法优点：允许在做真正的工作前后做一些事情：事前工作、事后工作

藉由Funtion Pointers实现Strategy模式
    回调函数成员变量， 构造函数传递回调函数指针

藉由tr1::function 完成Strategy模式


virtual函数的替代方案
    使用non-virtual interface（NVI）手法，那是Template Method设计模式的一种特殊形式。
        它以public non-virtual成员函数包裹较低访问性（private或protected）的virtual函数。

    将virtual函数替换为“函数指针成员变量”，这是Strategy设计模式的一种分解表现形式

    以trl::function成员变量替换virtual函数，因而允许使用任何可调用物（callable entity）搭配
        一个兼容于需求的签名式。这也是Strategy设计模式的某种形式。

    将继承体系内的virtual函数替换为另一个继承体系内的virtual函数。这是Strategy设计模式的传统实现手法。

请记住：
    virtual函数的替代方案包括NVI手法及Strategy设计模式的多种形式。NVI手法自身是一个特殊形式的Template Method设计模式
    将机能从成员函数移到class外部函数，带来的一个缺点是，非成员函数无法访问class的non-public成员。
    tr1::function对象的行为就像一般函数指针。这样的对象可接纳“与给定之目标签名式兼容”的所有可调用物。