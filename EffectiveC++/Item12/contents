

条款12：复制对象时勿忘其每一个成分


注意1：
    当类添加新的成员变量时，必须同时修改copying函数（copy构造函数和copy assugnment操作符）
        （还有所有的构造函数）以及任何非标准形式的operator=

注意2：
    derived class 对象调用base class内的合适copying函数来初始化基类对象

    class Customer {};
    class PriorityCustomer:public Customer {}

    PriorityCustomer::PriorityCustomer(const PriorityCustomer& rhs)
        : Customer(rhs), // 调用base class的copy构造函数
        priority(rhs.priority)
    {
        ...
    }

    PriorityCustomer&
    PriorityCustomer::operator=(const PriorityCustomer& rhs)
    {
        Customer::operator=(rhs); // 对base class成分进行赋值动作
        priority = rhs.priority;
        return *this;
    }

copy assugnment操作符不要调用copy构造函数
copy构造函数也不要调用copy assugnment操作符

如果你发现你的copy构造函数和copy assugnment操作符有相近的代码，消除重复代码的做法是，
    建立一个新的成员函数给两者调用。这样的函数往往是private而且被命名为init。

请记住：
    Copying函数应该确保复制“对象内的所有成员对象”及“所有base class成分”
    不要尝试以某个copying函数实现另一个copying函数。应该将共同机能放进第三个函数中，
        并由两个copying函数共同调用