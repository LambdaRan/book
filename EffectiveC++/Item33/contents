


条款33：避免遮掩继承而来的名称

内层作用域的名称会遮掩（遮蔽）外围作用域的名称。

派生类的作用域嵌套在其基类的作用域之内

C++的名称遮掩规则所做的唯一事情就是：遮掩名称。
    变量：不管变量类型是否相同
    函数：不管形参列表是否相同

以作用域为基础的“名称遮掩规则”同样适用：
    即使base class和derived class内的函数有不同的参数类型也是用，而且不论函数是virtual或non-virtual一体适用。

如果derived class继承base class并且还有重载函数，而你又想重新定义或覆写（推翻）其中的一部分，那么你必须为那些原本会被
    遮掩的每个名称引入一个using声明式，否则某些你所希望继承的名称会被遮掩。

    class Derived::public base 
    {
        public:
            using Base::mf1; // 让base class内名为mf1和mf3的所有东西
            using Base::mf3; // 在derived 作用域内都可见

            virtual void mf1();
            void mf3();
            void mf4();
    };


如果derived class只想继承base class内的某几个函数，在derived class内使用转换函数

class Derived:private Base
{
    public:
        virtual void mf1() // 转交函数暗自成为inline
        {
            Base::mf1();
        }
};

inline转交函数的另一个用途是为那些不支持using声明式的老式编译器另辟一条新路，将继承而得的名称汇入derived class作用域内。

请记住：
    derived class内的名称会遮掩base classes内的名称。在public继承下从来没有人希望如此。
    为了让被遮掩的名称再见天日，可使用using声明式或转交函数。