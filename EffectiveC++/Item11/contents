

条款11：在operator=中处理“自我赋值”


阻止自我赋值错误的方法：
（1）使用“证同测试（identity test）”达到“自我赋值”的检验目的
    不仅不具备“自我复制赋值安全性”，也不具备“异常安全性”
Widget& Widget::operator=(const Widget& rhs)
{
    if (this == &rhs)
        return *this;// 证同测试
    delete pb;
    pb = new Bitmap(*rhs.pb);
    return *this;
}

（2）精心安排语句
Widget& Widget::operator=(const Widget& rhs)
{
    Bitmap *pOrig = pb;
    pb = new Bitmap(*rhs.pb);   
    delete pOrig;
    return *this;
}

(3)使用所谓的“copy and swap计数”
class Widget
{
    ...
    void swap(Widget &rhs);
};
Widget& Widget::operator=(const Widget& rhs)
{
    Widget tmp(rhs)   ;
    swap(tmp);
    return *this;
}


请记住：
    确保当对象自赋值时operator=有良好行为。其中技术包括
        比较“来源对象”和“目标对象”的地址，精心周到的语句顺序，以及copy-and-swap
    确定任何函数如果操作一个以上的对象，而其中多个对象是同一个对象时，其行为仍然正确。