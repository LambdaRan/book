

6.4 树的存储结构

1.双亲表示法：
    #define MAX_TREE_SIZE 100
    typedef int TElemType; // 节点数据类型
    typedef struct PTNode // 节点结构
    {
        TElemType data; // 节点数据
        int parent; // 双亲位置
    } PTNode;

    typedef struct // 树结构
    {
        PTNode nodes[MAX_TREE_SIZE]; // 节点数组
        int r, n; // 根的位置和结点数
    } PTree;

优点：便于找到双亲节点

2.孩子表示法：
    #define MAX_TREE_SIZE 100
    typedef struct CTNode // 孩子节点
    {
        int child; // 用来存储某个节点在表头数组中的下标
        struct CTNode *next; // 指向某节点的下一个孩子节点的指针
    } *ChildPtr;

    typedef struct // 表头节点
    {
        TElemType data; // 节点数据信息
        ChildPtr firstchild; // 该结点孩子链表的头指针
    } CTBox;
    typedef struct // 树结构
    {
        CTBox nodes[MAX_TREE_SIZE]; // 节点数组
        int r, n; // 根的位置和节点数
    } CTree;

优点：便于查找孩子、某节点兄弟和遍历整棵树
扩展：双亲孩子表示法

3.孩子兄弟表示法
    typedef struct CSNode
    {
        TElemType data;// 节点数据信息
        struct CSNode *firstchild, *rightsib; // 
        // firstchild 该节点第一个孩子节点
        // rightsib 该节点兄弟节点
    } CSNode, *CSTree;
优点：便于查找孩子节点

将一颗复杂的树变成一颗二叉树。

